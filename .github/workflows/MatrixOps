package CryptoHill;

import java.util.Arrays;

public class MatrixOps {



	// sum of 2 vectors

	public static double[] sum(double[] x, double[] y)
	{
		if (x.length != y.length) throw new RuntimeException("illegal vector dimensions");
		double[] z = new double[x.length];
		for (int i=0; i<x.length; i++)
			z[i] = x[i] + y[i];
		return z;
	}
	
	// dot product of 2 vectors
	
	public static double dot(double[] x, double[] y)
	{
		if (x.length != y.length) throw new RuntimeException("illegal vector dimensions");
		double sum = 0.0;
		for (int i=0; i<x.length; i++)
			sum += x[i] * y[i];

		return sum;

	}
	
	// return n-by-n identity matrix I

		public static double[][] identity(int n)
		{
			double[][] a = new double[n][n];
			for (int i =0; i < n; i++)
				a[i][i] = 1;
			return a;
		}
	// transpose matrix
	public static double[] [] transpose(double[][] a)
	{
		int m = a.length;
		int n = a[0].length;
		double[][] b = new double [n][m];
		for (int i = 0 ; i < m; i++)
			for (int j = 0; j < n; j++)
			b[j][i] = a[i][j];
			return b;
	}
	// matrix addition: c = a + b
	public static double[] [] add(double[] [] a, double [] [] b)
	{
		int m = a.length;
		int n = a[0].length;
		double[] [] c = new double[m] [n];
		for (int i=0; i < m; i++)
			for (int j = 0; j < n; j++)
				c[i][j] = a[i][j] + b[i][j];
		return c;
	}
	// matrix subtraction: c = a - b
		public static double[] [] subtract(double[] [] a, double [] [] b)
		{
			int m = a.length;
			int n = a[0].length;
			double[] [] c = new double[m] [n];
			for (int i=0; i < m; i++)
				for (int j = 0; j < n; j++)
					c[i][j] = a[i][j] - b[i][j];
			return c;
		}
		
	// matrix multiplication: c = a * b
		public static double [] [] multiply(double [] [] a, double [] [] b)
		{
			int m1 = a.length;
			int n1 = a[0].length;
			int m2 = b.length;
			int n2 = b[0].length;
			if (n1 != m2) throw new RuntimeException("Illegal matrix dimensions.");
			double[] [] c = new double[m1][n2];
			for (int i = 0; i < m1; i++)
				for (int j = 0; j < n2; j++)
					for (int k = 0; k < n1; k++)
						c[i][j] += a[i][k] * b[k][j];
			return c;

		}
		
	// display matrix
	public static void display(double [] [] mat, int row, int col)
	{
		for(int i=0; i < row; i++)
			{
				for (int j = 0; j < col; j++)
					{
						System.out.print(mat[i][j] + " ");
					}
			System.out.print("\n");
		}
	}
	
	//matrix-vector multilpication: a * x
	public static double[] multiply(double[][] a, double[] x)
	{
		int m = a.length;
		int n = a[0].length;
		if (x.length != n) throw new RuntimeException("Illegal matrix dimensions.");
		double[] y = new double[n];
		for (int j = 0; j < n; j++)
			for (int i = 0; i < m; i++)
				y[j] += a[i][j] * x[i];
		return y;
	}
	
	//vector-matrix multiplication: x^T * a
	public static double[] multiply(double[] x, double[][] a)
	{
		int m = a.length;
		int n = a[0].length;
		if (x.length != m) throw new RuntimeException("Illegal matrix dimensions.");
		double[] y = new double[m];
		for (int j = 0; j < n; j++)
			for (int i = 0; i < m; i++)
				y[i] += a[i][j] * x[i];
		return y;
	}
	
	//method to create submatrix of mat (without row p and col q) written into temp
	public static void submatrix(double[][] mat, double[][] temp, int p, int q)
	{
		int n = mat.length;
		int i = 0, j = 0;
		for (int row = 0; row < n; row++)
		{
			for (int col = 0; col < n; col++)
			{
				if (row != p && col != q)
				{
					temp[i][j++] = mat[row][col];
					if (j == n - 1)
					{
						j = 0;
						i++;
					}
				}
			}
		}
		
	}
	
	
	// recursive method for determinant of square matrix
	public static double det(double [][] mat, int n)
	{
		int detVal = 0;
		if (n==1)
		{
			return mat[0][0];
		}
		else
		{
			//initialize temp to store submatrix
		double[][] temp = new double[n-1][n-1];
           
			int sign = 1;
			for (int k=0; k < n; k++)
			{
				submatrix(mat, temp, 0, k); //create submatrix in temp
				detVal += sign * mat[0][k] * det(temp, n - 1); //recursive call
				sign = -sign; // alternate signs
				
			}
		}
		return detVal;
	}
	
	//matrix adjugate of a square matrix
	public static double[][] adjugate(double[][] a)
	{
		int n = a.length;
		double[][] temp = new double[n-1][n-1];
		double [][] adj = new double[n][n];
		for (int i = 0; i < n; i++)
		{
			for (int j = 0; j < n; j++)
			{
				submatrix(a,temp,i,j);
				adj[i][j] = ((int)Math.pow(-1, i+j))*det(temp, n-1);
				temp = new double[n-1][n-1];
			}
		}
		adj = transpose(adj);
		return adj;
	}
	
	//
	public static double[][] scalarMult(double r, double[][] a)
	{
		int n = a.length;
		int m = a[0].length;
		double[][] b = new double[n][n];
		for (int i = 0; i < n; i++)
		{
			for (int j = 0; j < m; j++)
			{
				b[i][j] = r * a[i][j];
			}
		}
		return b;
	}
	
	//matrix inverse when it exists
	public static double[][] inverse(double[][] a)
	{
		double det = det(a,a.length);
		if (det == 0) throw new RuntimeException("matrix is not invertible.");
		return scalarMult(1/det,adjugate(a));
	}
	
	public static void main(String[] args) {
		double[] vec0 = {1., 0., 2., -1.};
		double[] vec1 = {3., 0., 0., 5.};
		System.out.println("vec0, vec1:");
		System.out.println(Arrays.toString(vec0) + "" + Arrays.toString(vec1));
		System.out.println("vec0 + vec1:");
		System.out.println(Arrays.toString(MatrixOps.sum(vec0, vec1)));
		System.out.println(" vec0 dot vec1:");
		System.out.println(MatrixOps.dot(vec0, vec1));
		
		double[] [] mat0 = {{1., 0., 2., -1.},
							{3., 0., 0., 5.},
							{2., 1., 4., 5.},
							{1., 0., 5., 0.}};
							
		double[] [] mat1 = {{1., 2., 1., 0.},
							{0., 3., 1., 1.},
							{-1., 0., 3., 1.},
							{3., 1., 2., 0.}};					
	System.out.println("mat0:");
	MatrixOps.display(mat0,  4,  4);;
	System.out.println();
	System.out.println("mat0 transpose:");
	MatrixOps.display(MatrixOps.transpose(mat0), 4, 4);
	System.out.println();
	
	double[] [] mat4 = MatrixOps.add(mat0, mat1);
	double[] [] mat5 = MatrixOps.multiply(mat0, mat1);
	int n = 4;
	System.out.println("mat0:");
	display(mat0, n, n);
	System.out.println("mat1:");
	display(mat1, n, n);
	System.out.println("mat0 + mat1:");
	display(mat4, n, n);
	System.out.println("mat0 + mat1:");
	display(mat5, n, n);
	System.out.println();
	
	long[] [] mat2 = {{1, 0, 2, -1},
					{3, 0, 0, 5},
					{2, 1, 4, 5},
					{1, 0, 5, 0}};
	
	long[][] mat30 = {{1,3},
					{5, -2}};
	
	System.out.println("mat0:");
	display(mat0, n, n);
	System.out.println("Determinant of the matrix is : " + det(mat0, n));
	System.out.println("mat1:");
	display(mat1, n, n);
	System.out.println("Determinant of the matrix is : " + det(mat1, n));
	System.out.println("mat5 = mat0 * mat1:");
	display(mat5, n, n);
	System.out.println("Determinant of the matrix is : " + det(mat5, n));
	System.out.println();
	
	
	n = 4;
	System.out.println("mat0*inverse(mat0):");
	display(MatrixOps.multiply(mat0, inverse(mat0)), n, n);
	System.out.println();
	System.out.println("mat1*inverse(mat1):");
	display(MatrixOps.multiply(mat1, inverse(mat1)), n, n);
	System.out.println();
	System.out.println("mat2*transpose(mat2):");
	display(MatrixOps.multiply(mat2, transpose(mat2)), n, n);
	System.out.println();
	

	
	}
	// sum of 2 vectors

		public static long[] sum(long[] x, long[] y)
		{
			if (x.length != y.length) throw new RuntimeException("illegal vector dimensions");
			long[] z = new long[x.length];
			for (int i=0; i<x.length; i++)
				z[i] = x[i] + y[i];
			return z;
		}
		
		// dot product of 2 vectors
		
		public static long dot(long[] x, long[] y)
		{
			if (x.length != y.length) throw new RuntimeException("illegal vector dimensions");
			long sum = 0;
			for (int i=0; i<x.length; i++)
				sum += x[i] * y[i];
			return sum;
		}
		
		// return n-by-n identity matrix I

			public static long[][] identity(long n)
			{
				int m = (int)n;
				long[][] a = new long[m][m];
				for (int i =0; i < n; i++)
					a[i][i] = 1;
				return a;
			}
		// transpose matrix
		public static long[] [] transpose(long[][] a)
		{
			int m = a.length;
			int n = a[0].length;
			long[][] b = new long [n][m];
			for (int i = 0 ; i < m; i++)
				for (int j = 0; j < n; j++)
				b[j][i] = a[i][j];
				return b;
		}
		// matrix addition: c = a + b
		public static long[] [] add(long[] [] a, long [] [] b)
		{
			int m = a.length;
			int n = a[0].length;
			long[] [] c = new long[m] [n];
			for (int i=0; i < m; i++)
				for (int j = 0; j < n; j++)
					c[i][j] = a[i][j] + b[i][j];
			return c;
		}
		
		// matrix subtraction: c = a - b
			public static long[] [] subtract(long[] [] a, long [] [] b)
			{
				int m = a.length;
				int n = a[0].length;
				long[] [] c = new long[m] [n];
				for (int i=0; i < m; i++)
					for (int j = 0; j < n; j++)
						c[i][j] = a[i][j] - b[i][j];
				return c;
			}
			
		// matrix multiplication: c = a * b
			public static long [] [] multiply(long [] [] a, long [] [] b)
			{
				int m1 = a.length;
				int n1 = a[0].length;
				int m2 = b.length;
				int n2 = b[0].length;
				if (n1 != m2) throw new RuntimeException("Illegal matrix dimensions.");
				long[] [] c = new long[m1][n2];
				for (int i = 0; i < m1; i++)
					for (int j = 0; j < n2; j++)
						for (int k = 0; k < n1; k++)
							c[i][j] += a[i][k] * b[k][j];
				return c;
			}
			
		// display matrix
		public static void display(long [] [] mat, int row, int col)
		{
			for(int i=0; i < row; i++)
				{
					for (int j = 0; j < col; j++)
						{
							System.out.print(mat[i][j] + " ");
						}
				System.out.print("\n");
			}
		}
		
		//matrix-vector multilpication: a * x
		public static long[] multiply(long[][] a, long[] x)
		{
			int m = a.length;
			int n = a[0].length;
			if (x.length != n) throw new RuntimeException("Illegal matrix dimensions.");
			long[] y = new long[n];
			for (int j = 0; j < n; j++)
				for (int i = 0; i < m; i++)
					y[j] += a[i][j] * x[i];
			return y;
		}
		
		//vector-matrix multiplication: x^T * a
		public static long[] multiply(long[] x, long[][] a)
		{
			int m = a.length;
			int n = a[0].length;
			if (x.length != m) throw new RuntimeException("Illegal matrix dimensions.");
			long[] y = new long[m];
			for (int j = 0; j < n; j++)
				for (int i = 0; i < m; i++)
					y[i] += a[i][j] * x[i];
			return y;
		}
		
		//method to create submatrix of mat (without row p and col q) written into temp
		public static void submatrix(long[][] mat, long[][] temp, int p, int q)
		{
			int n = mat.length;
			int i = 0, j = 0;
			for (int row = 0; row < n; row++)
			{
				for (int col = 0; col < n; col++)
				{
					if (row != p && col != q)
					{
						temp[i][j++] = mat[row][col];
						if (j == n - 1)
						{
							j = 0;
							i++;
						}
					}
				}
			}
			
		}
		
		
		// recursive method for determinant of square matrix
		public static long det(long [][] mat, int n)
		{
			int detVal = 0;
			if (n==1)
			{
				return mat[0][0];
			}
			else
			{
				//initialize temp to store submatrix
				long[][] temp = new long[n-1][n-1];
				int sign = 1;
				for (int k=0; k < n; k++)
				{
					submatrix(mat, temp, 0, k); //create submatrix in temp
					detVal += sign * mat[0][k] * det(temp, n - 1); //recursive call
					sign = -sign; // alternate signs
					
				}
			}
			return detVal;
		}
		
		//matrix adjugate of a square matrix
		public static long[][] adjugate(long[][] a)
		{
			int n = a.length;
			long[][] temp = new long[n-1][n-1];
			long [][] adj = new long[n][n];
			for (int i = 0; i < n; i++)
			{
				for (int j = 0; j < n; j++)
				{
					submatrix(a,temp,i,j);
					adj[i][j] = ((int)Math.pow(-1, i+j))*det(temp, n-1);
					temp = new long[n-1][n-1];
				}
			}
			adj = transpose(adj);
			return adj;
		}
		
		//
		public static long[][] scalarMult(long r, long[][] a)
		{
			int n = a.length;
			int m = a[0].length;
			long[][] b = new long[n][n];
			for (int i = 0; i < n; i++)
			{
				for (int j = 0; j < m; j++)
				{
					b[i][j] = r * a[i][j];
				}
			}
			return b;
		}
		
		//matrix inverse when it exists
		public static long[][] inverse(long[][] a)
		{
			long det = det(a,a.length);
			if (det == 0) throw new RuntimeException("matrix is not invertible.");
			return scalarMult(1/det,adjugate(a));
		}
		}
